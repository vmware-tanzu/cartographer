// Code generated by counterfeiter. DO NOT EDIT.
package templatesfakes

import (
	"io"
	"sync"
)

type FakeTagInterpolator struct {
	EvaluateStub        func(string) (interface{}, error)
	evaluateMutex       sync.RWMutex
	evaluateArgsForCall []struct {
		arg1 string
	}
	evaluateReturns struct {
		result1 interface{}
		result2 error
	}
	evaluateReturnsOnCall map[int]struct {
		result1 interface{}
		result2 error
	}
	InterpolateTagStub        func(io.Writer, string) (int, error)
	interpolateTagMutex       sync.RWMutex
	interpolateTagArgsForCall []struct {
		arg1 io.Writer
		arg2 string
	}
	interpolateTagReturns struct {
		result1 int
		result2 error
	}
	interpolateTagReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTagInterpolator) Evaluate(arg1 string) (interface{}, error) {
	fake.evaluateMutex.Lock()
	ret, specificReturn := fake.evaluateReturnsOnCall[len(fake.evaluateArgsForCall)]
	fake.evaluateArgsForCall = append(fake.evaluateArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.EvaluateStub
	fakeReturns := fake.evaluateReturns
	fake.recordInvocation("Evaluate", []interface{}{arg1})
	fake.evaluateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTagInterpolator) EvaluateCallCount() int {
	fake.evaluateMutex.RLock()
	defer fake.evaluateMutex.RUnlock()
	return len(fake.evaluateArgsForCall)
}

func (fake *FakeTagInterpolator) EvaluateCalls(stub func(string) (interface{}, error)) {
	fake.evaluateMutex.Lock()
	defer fake.evaluateMutex.Unlock()
	fake.EvaluateStub = stub
}

func (fake *FakeTagInterpolator) EvaluateArgsForCall(i int) string {
	fake.evaluateMutex.RLock()
	defer fake.evaluateMutex.RUnlock()
	argsForCall := fake.evaluateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTagInterpolator) EvaluateReturns(result1 interface{}, result2 error) {
	fake.evaluateMutex.Lock()
	defer fake.evaluateMutex.Unlock()
	fake.EvaluateStub = nil
	fake.evaluateReturns = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeTagInterpolator) EvaluateReturnsOnCall(i int, result1 interface{}, result2 error) {
	fake.evaluateMutex.Lock()
	defer fake.evaluateMutex.Unlock()
	fake.EvaluateStub = nil
	if fake.evaluateReturnsOnCall == nil {
		fake.evaluateReturnsOnCall = make(map[int]struct {
			result1 interface{}
			result2 error
		})
	}
	fake.evaluateReturnsOnCall[i] = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeTagInterpolator) InterpolateTag(arg1 io.Writer, arg2 string) (int, error) {
	fake.interpolateTagMutex.Lock()
	ret, specificReturn := fake.interpolateTagReturnsOnCall[len(fake.interpolateTagArgsForCall)]
	fake.interpolateTagArgsForCall = append(fake.interpolateTagArgsForCall, struct {
		arg1 io.Writer
		arg2 string
	}{arg1, arg2})
	stub := fake.InterpolateTagStub
	fakeReturns := fake.interpolateTagReturns
	fake.recordInvocation("InterpolateTag", []interface{}{arg1, arg2})
	fake.interpolateTagMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTagInterpolator) InterpolateTagCallCount() int {
	fake.interpolateTagMutex.RLock()
	defer fake.interpolateTagMutex.RUnlock()
	return len(fake.interpolateTagArgsForCall)
}

func (fake *FakeTagInterpolator) InterpolateTagCalls(stub func(io.Writer, string) (int, error)) {
	fake.interpolateTagMutex.Lock()
	defer fake.interpolateTagMutex.Unlock()
	fake.InterpolateTagStub = stub
}

func (fake *FakeTagInterpolator) InterpolateTagArgsForCall(i int) (io.Writer, string) {
	fake.interpolateTagMutex.RLock()
	defer fake.interpolateTagMutex.RUnlock()
	argsForCall := fake.interpolateTagArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTagInterpolator) InterpolateTagReturns(result1 int, result2 error) {
	fake.interpolateTagMutex.Lock()
	defer fake.interpolateTagMutex.Unlock()
	fake.InterpolateTagStub = nil
	fake.interpolateTagReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeTagInterpolator) InterpolateTagReturnsOnCall(i int, result1 int, result2 error) {
	fake.interpolateTagMutex.Lock()
	defer fake.interpolateTagMutex.Unlock()
	fake.InterpolateTagStub = nil
	if fake.interpolateTagReturnsOnCall == nil {
		fake.interpolateTagReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.interpolateTagReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeTagInterpolator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.evaluateMutex.RLock()
	defer fake.evaluateMutex.RUnlock()
	fake.interpolateTagMutex.RLock()
	defer fake.interpolateTagMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTagInterpolator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
