// Code generated by counterfeiter. DO NOT EDIT.
package satokenfakes

import (
	"sync"

	"github.com/vmware-tanzu/cartographer/pkg/satoken"
	v1 "k8s.io/api/core/v1"
)

type FakeTokenManager struct {
	CleanupStub        func()
	cleanupMutex       sync.RWMutex
	cleanupArgsForCall []struct {
	}
	GetServiceAccountTokenStub        func(*v1.ServiceAccount) (string, error)
	getServiceAccountTokenMutex       sync.RWMutex
	getServiceAccountTokenArgsForCall []struct {
		arg1 *v1.ServiceAccount
	}
	getServiceAccountTokenReturns struct {
		result1 string
		result2 error
	}
	getServiceAccountTokenReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTokenManager) Cleanup() {
	fake.cleanupMutex.Lock()
	fake.cleanupArgsForCall = append(fake.cleanupArgsForCall, struct {
	}{})
	stub := fake.CleanupStub
	fake.recordInvocation("Cleanup", []interface{}{})
	fake.cleanupMutex.Unlock()
	if stub != nil {
		fake.CleanupStub()
	}
}

func (fake *FakeTokenManager) CleanupCallCount() int {
	fake.cleanupMutex.RLock()
	defer fake.cleanupMutex.RUnlock()
	return len(fake.cleanupArgsForCall)
}

func (fake *FakeTokenManager) CleanupCalls(stub func()) {
	fake.cleanupMutex.Lock()
	defer fake.cleanupMutex.Unlock()
	fake.CleanupStub = stub
}

func (fake *FakeTokenManager) GetServiceAccountToken(arg1 *v1.ServiceAccount) (string, error) {
	fake.getServiceAccountTokenMutex.Lock()
	ret, specificReturn := fake.getServiceAccountTokenReturnsOnCall[len(fake.getServiceAccountTokenArgsForCall)]
	fake.getServiceAccountTokenArgsForCall = append(fake.getServiceAccountTokenArgsForCall, struct {
		arg1 *v1.ServiceAccount
	}{arg1})
	stub := fake.GetServiceAccountTokenStub
	fakeReturns := fake.getServiceAccountTokenReturns
	fake.recordInvocation("GetServiceAccountToken", []interface{}{arg1})
	fake.getServiceAccountTokenMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTokenManager) GetServiceAccountTokenCallCount() int {
	fake.getServiceAccountTokenMutex.RLock()
	defer fake.getServiceAccountTokenMutex.RUnlock()
	return len(fake.getServiceAccountTokenArgsForCall)
}

func (fake *FakeTokenManager) GetServiceAccountTokenCalls(stub func(*v1.ServiceAccount) (string, error)) {
	fake.getServiceAccountTokenMutex.Lock()
	defer fake.getServiceAccountTokenMutex.Unlock()
	fake.GetServiceAccountTokenStub = stub
}

func (fake *FakeTokenManager) GetServiceAccountTokenArgsForCall(i int) *v1.ServiceAccount {
	fake.getServiceAccountTokenMutex.RLock()
	defer fake.getServiceAccountTokenMutex.RUnlock()
	argsForCall := fake.getServiceAccountTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTokenManager) GetServiceAccountTokenReturns(result1 string, result2 error) {
	fake.getServiceAccountTokenMutex.Lock()
	defer fake.getServiceAccountTokenMutex.Unlock()
	fake.GetServiceAccountTokenStub = nil
	fake.getServiceAccountTokenReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenManager) GetServiceAccountTokenReturnsOnCall(i int, result1 string, result2 error) {
	fake.getServiceAccountTokenMutex.Lock()
	defer fake.getServiceAccountTokenMutex.Unlock()
	fake.GetServiceAccountTokenStub = nil
	if fake.getServiceAccountTokenReturnsOnCall == nil {
		fake.getServiceAccountTokenReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getServiceAccountTokenReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cleanupMutex.RLock()
	defer fake.cleanupMutex.RUnlock()
	fake.getServiceAccountTokenMutex.RLock()
	defer fake.getServiceAccountTokenMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTokenManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ satoken.TokenManager = new(FakeTokenManager)
