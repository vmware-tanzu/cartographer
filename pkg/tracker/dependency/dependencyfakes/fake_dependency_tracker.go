// Code generated by counterfeiter. DO NOT EDIT.
package dependencyfakes

import (
	"sync"

	"github.com/vmware-tanzu/cartographer/pkg/tracker/dependency"
	"k8s.io/apimachinery/pkg/types"
)

type FakeDependencyTracker struct {
	LookupStub        func(dependency.Key) []types.NamespacedName
	lookupMutex       sync.RWMutex
	lookupArgsForCall []struct {
		arg1 dependency.Key
	}
	lookupReturns struct {
		result1 []types.NamespacedName
	}
	lookupReturnsOnCall map[int]struct {
		result1 []types.NamespacedName
	}
	TrackStub        func(dependency.Key, types.NamespacedName)
	trackMutex       sync.RWMutex
	trackArgsForCall []struct {
		arg1 dependency.Key
		arg2 types.NamespacedName
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDependencyTracker) Lookup(arg1 dependency.Key) []types.NamespacedName {
	fake.lookupMutex.Lock()
	ret, specificReturn := fake.lookupReturnsOnCall[len(fake.lookupArgsForCall)]
	fake.lookupArgsForCall = append(fake.lookupArgsForCall, struct {
		arg1 dependency.Key
	}{arg1})
	stub := fake.LookupStub
	fakeReturns := fake.lookupReturns
	fake.recordInvocation("Lookup", []interface{}{arg1})
	fake.lookupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDependencyTracker) LookupCallCount() int {
	fake.lookupMutex.RLock()
	defer fake.lookupMutex.RUnlock()
	return len(fake.lookupArgsForCall)
}

func (fake *FakeDependencyTracker) LookupCalls(stub func(dependency.Key) []types.NamespacedName) {
	fake.lookupMutex.Lock()
	defer fake.lookupMutex.Unlock()
	fake.LookupStub = stub
}

func (fake *FakeDependencyTracker) LookupArgsForCall(i int) dependency.Key {
	fake.lookupMutex.RLock()
	defer fake.lookupMutex.RUnlock()
	argsForCall := fake.lookupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDependencyTracker) LookupReturns(result1 []types.NamespacedName) {
	fake.lookupMutex.Lock()
	defer fake.lookupMutex.Unlock()
	fake.LookupStub = nil
	fake.lookupReturns = struct {
		result1 []types.NamespacedName
	}{result1}
}

func (fake *FakeDependencyTracker) LookupReturnsOnCall(i int, result1 []types.NamespacedName) {
	fake.lookupMutex.Lock()
	defer fake.lookupMutex.Unlock()
	fake.LookupStub = nil
	if fake.lookupReturnsOnCall == nil {
		fake.lookupReturnsOnCall = make(map[int]struct {
			result1 []types.NamespacedName
		})
	}
	fake.lookupReturnsOnCall[i] = struct {
		result1 []types.NamespacedName
	}{result1}
}

func (fake *FakeDependencyTracker) Track(arg1 dependency.Key, arg2 types.NamespacedName) {
	fake.trackMutex.Lock()
	fake.trackArgsForCall = append(fake.trackArgsForCall, struct {
		arg1 dependency.Key
		arg2 types.NamespacedName
	}{arg1, arg2})
	stub := fake.TrackStub
	fake.recordInvocation("Track", []interface{}{arg1, arg2})
	fake.trackMutex.Unlock()
	if stub != nil {
		fake.TrackStub(arg1, arg2)
	}
}

func (fake *FakeDependencyTracker) TrackCallCount() int {
	fake.trackMutex.RLock()
	defer fake.trackMutex.RUnlock()
	return len(fake.trackArgsForCall)
}

func (fake *FakeDependencyTracker) TrackCalls(stub func(dependency.Key, types.NamespacedName)) {
	fake.trackMutex.Lock()
	defer fake.trackMutex.Unlock()
	fake.TrackStub = stub
}

func (fake *FakeDependencyTracker) TrackArgsForCall(i int) (dependency.Key, types.NamespacedName) {
	fake.trackMutex.RLock()
	defer fake.trackMutex.RUnlock()
	argsForCall := fake.trackArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDependencyTracker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.lookupMutex.RLock()
	defer fake.lookupMutex.RUnlock()
	fake.trackMutex.RLock()
	defer fake.trackMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDependencyTracker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dependency.DependencyTracker = new(FakeDependencyTracker)
