// Code generated by counterfeiter. DO NOT EDIT.
package repositoryfakes

import (
	"sync"

	"github.com/vmware-tanzu/cartographer/pkg/repository"
	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
)

type FakeRepoCache struct {
	RefreshStub        func(*unstructured.Unstructured)
	refreshMutex       sync.RWMutex
	refreshArgsForCall []struct {
		arg1 *unstructured.Unstructured
	}
	SetStub        func(*unstructured.Unstructured, *unstructured.Unstructured)
	setMutex       sync.RWMutex
	setArgsForCall []struct {
		arg1 *unstructured.Unstructured
		arg2 *unstructured.Unstructured
	}
	UnchangedSinceCachedStub        func(*unstructured.Unstructured, *unstructured.Unstructured) bool
	unchangedSinceCachedMutex       sync.RWMutex
	unchangedSinceCachedArgsForCall []struct {
		arg1 *unstructured.Unstructured
		arg2 *unstructured.Unstructured
	}
	unchangedSinceCachedReturns struct {
		result1 bool
	}
	unchangedSinceCachedReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRepoCache) Refresh(arg1 *unstructured.Unstructured) {
	fake.refreshMutex.Lock()
	fake.refreshArgsForCall = append(fake.refreshArgsForCall, struct {
		arg1 *unstructured.Unstructured
	}{arg1})
	stub := fake.RefreshStub
	fake.recordInvocation("Refresh", []interface{}{arg1})
	fake.refreshMutex.Unlock()
	if stub != nil {
		fake.RefreshStub(arg1)
	}
}

func (fake *FakeRepoCache) RefreshCallCount() int {
	fake.refreshMutex.RLock()
	defer fake.refreshMutex.RUnlock()
	return len(fake.refreshArgsForCall)
}

func (fake *FakeRepoCache) RefreshCalls(stub func(*unstructured.Unstructured)) {
	fake.refreshMutex.Lock()
	defer fake.refreshMutex.Unlock()
	fake.RefreshStub = stub
}

func (fake *FakeRepoCache) RefreshArgsForCall(i int) *unstructured.Unstructured {
	fake.refreshMutex.RLock()
	defer fake.refreshMutex.RUnlock()
	argsForCall := fake.refreshArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRepoCache) Set(arg1 *unstructured.Unstructured, arg2 *unstructured.Unstructured) {
	fake.setMutex.Lock()
	fake.setArgsForCall = append(fake.setArgsForCall, struct {
		arg1 *unstructured.Unstructured
		arg2 *unstructured.Unstructured
	}{arg1, arg2})
	stub := fake.SetStub
	fake.recordInvocation("Set", []interface{}{arg1, arg2})
	fake.setMutex.Unlock()
	if stub != nil {
		fake.SetStub(arg1, arg2)
	}
}

func (fake *FakeRepoCache) SetCallCount() int {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	return len(fake.setArgsForCall)
}

func (fake *FakeRepoCache) SetCalls(stub func(*unstructured.Unstructured, *unstructured.Unstructured)) {
	fake.setMutex.Lock()
	defer fake.setMutex.Unlock()
	fake.SetStub = stub
}

func (fake *FakeRepoCache) SetArgsForCall(i int) (*unstructured.Unstructured, *unstructured.Unstructured) {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	argsForCall := fake.setArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRepoCache) UnchangedSinceCached(arg1 *unstructured.Unstructured, arg2 *unstructured.Unstructured) bool {
	fake.unchangedSinceCachedMutex.Lock()
	ret, specificReturn := fake.unchangedSinceCachedReturnsOnCall[len(fake.unchangedSinceCachedArgsForCall)]
	fake.unchangedSinceCachedArgsForCall = append(fake.unchangedSinceCachedArgsForCall, struct {
		arg1 *unstructured.Unstructured
		arg2 *unstructured.Unstructured
	}{arg1, arg2})
	stub := fake.UnchangedSinceCachedStub
	fakeReturns := fake.unchangedSinceCachedReturns
	fake.recordInvocation("UnchangedSinceCached", []interface{}{arg1, arg2})
	fake.unchangedSinceCachedMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRepoCache) UnchangedSinceCachedCallCount() int {
	fake.unchangedSinceCachedMutex.RLock()
	defer fake.unchangedSinceCachedMutex.RUnlock()
	return len(fake.unchangedSinceCachedArgsForCall)
}

func (fake *FakeRepoCache) UnchangedSinceCachedCalls(stub func(*unstructured.Unstructured, *unstructured.Unstructured) bool) {
	fake.unchangedSinceCachedMutex.Lock()
	defer fake.unchangedSinceCachedMutex.Unlock()
	fake.UnchangedSinceCachedStub = stub
}

func (fake *FakeRepoCache) UnchangedSinceCachedArgsForCall(i int) (*unstructured.Unstructured, *unstructured.Unstructured) {
	fake.unchangedSinceCachedMutex.RLock()
	defer fake.unchangedSinceCachedMutex.RUnlock()
	argsForCall := fake.unchangedSinceCachedArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRepoCache) UnchangedSinceCachedReturns(result1 bool) {
	fake.unchangedSinceCachedMutex.Lock()
	defer fake.unchangedSinceCachedMutex.Unlock()
	fake.UnchangedSinceCachedStub = nil
	fake.unchangedSinceCachedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeRepoCache) UnchangedSinceCachedReturnsOnCall(i int, result1 bool) {
	fake.unchangedSinceCachedMutex.Lock()
	defer fake.unchangedSinceCachedMutex.Unlock()
	fake.UnchangedSinceCachedStub = nil
	if fake.unchangedSinceCachedReturnsOnCall == nil {
		fake.unchangedSinceCachedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.unchangedSinceCachedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeRepoCache) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.refreshMutex.RLock()
	defer fake.refreshMutex.RUnlock()
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	fake.unchangedSinceCachedMutex.RLock()
	defer fake.unchangedSinceCachedMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRepoCache) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repository.RepoCache = new(FakeRepoCache)
