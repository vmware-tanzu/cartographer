// Code generated by counterfeiter. DO NOT EDIT.
package conditionsfakes

import (
	"sync"

	"github.com/vmware-tanzu/cartographer/pkg/conditions"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type FakeConditionManager struct {
	AddStub        func(v1.Condition, conditions.Polarity)
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		arg1 v1.Condition
		arg2 conditions.Polarity
	}
	AddNegativeStub        func(v1.Condition)
	addNegativeMutex       sync.RWMutex
	addNegativeArgsForCall []struct {
		arg1 v1.Condition
	}
	AddPositiveStub        func(v1.Condition)
	addPositiveMutex       sync.RWMutex
	addPositiveArgsForCall []struct {
		arg1 v1.Condition
	}
	FinalizeStub        func() ([]v1.Condition, bool)
	finalizeMutex       sync.RWMutex
	finalizeArgsForCall []struct {
	}
	finalizeReturns struct {
		result1 []v1.Condition
		result2 bool
	}
	finalizeReturnsOnCall map[int]struct {
		result1 []v1.Condition
		result2 bool
	}
	IsSuccessfulStub        func() bool
	isSuccessfulMutex       sync.RWMutex
	isSuccessfulArgsForCall []struct {
	}
	isSuccessfulReturns struct {
		result1 bool
	}
	isSuccessfulReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConditionManager) Add(arg1 v1.Condition, arg2 conditions.Polarity) {
	fake.addMutex.Lock()
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		arg1 v1.Condition
		arg2 conditions.Polarity
	}{arg1, arg2})
	stub := fake.AddStub
	fake.recordInvocation("Add", []interface{}{arg1, arg2})
	fake.addMutex.Unlock()
	if stub != nil {
		fake.AddStub(arg1, arg2)
	}
}

func (fake *FakeConditionManager) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *FakeConditionManager) AddCalls(stub func(v1.Condition, conditions.Polarity)) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = stub
}

func (fake *FakeConditionManager) AddArgsForCall(i int) (v1.Condition, conditions.Polarity) {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	argsForCall := fake.addArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeConditionManager) AddNegative(arg1 v1.Condition) {
	fake.addNegativeMutex.Lock()
	fake.addNegativeArgsForCall = append(fake.addNegativeArgsForCall, struct {
		arg1 v1.Condition
	}{arg1})
	stub := fake.AddNegativeStub
	fake.recordInvocation("AddNegative", []interface{}{arg1})
	fake.addNegativeMutex.Unlock()
	if stub != nil {
		fake.AddNegativeStub(arg1)
	}
}

func (fake *FakeConditionManager) AddNegativeCallCount() int {
	fake.addNegativeMutex.RLock()
	defer fake.addNegativeMutex.RUnlock()
	return len(fake.addNegativeArgsForCall)
}

func (fake *FakeConditionManager) AddNegativeCalls(stub func(v1.Condition)) {
	fake.addNegativeMutex.Lock()
	defer fake.addNegativeMutex.Unlock()
	fake.AddNegativeStub = stub
}

func (fake *FakeConditionManager) AddNegativeArgsForCall(i int) v1.Condition {
	fake.addNegativeMutex.RLock()
	defer fake.addNegativeMutex.RUnlock()
	argsForCall := fake.addNegativeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConditionManager) AddPositive(arg1 v1.Condition) {
	fake.addPositiveMutex.Lock()
	fake.addPositiveArgsForCall = append(fake.addPositiveArgsForCall, struct {
		arg1 v1.Condition
	}{arg1})
	stub := fake.AddPositiveStub
	fake.recordInvocation("AddPositive", []interface{}{arg1})
	fake.addPositiveMutex.Unlock()
	if stub != nil {
		fake.AddPositiveStub(arg1)
	}
}

func (fake *FakeConditionManager) AddPositiveCallCount() int {
	fake.addPositiveMutex.RLock()
	defer fake.addPositiveMutex.RUnlock()
	return len(fake.addPositiveArgsForCall)
}

func (fake *FakeConditionManager) AddPositiveCalls(stub func(v1.Condition)) {
	fake.addPositiveMutex.Lock()
	defer fake.addPositiveMutex.Unlock()
	fake.AddPositiveStub = stub
}

func (fake *FakeConditionManager) AddPositiveArgsForCall(i int) v1.Condition {
	fake.addPositiveMutex.RLock()
	defer fake.addPositiveMutex.RUnlock()
	argsForCall := fake.addPositiveArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConditionManager) Finalize() ([]v1.Condition, bool) {
	fake.finalizeMutex.Lock()
	ret, specificReturn := fake.finalizeReturnsOnCall[len(fake.finalizeArgsForCall)]
	fake.finalizeArgsForCall = append(fake.finalizeArgsForCall, struct {
	}{})
	stub := fake.FinalizeStub
	fakeReturns := fake.finalizeReturns
	fake.recordInvocation("Finalize", []interface{}{})
	fake.finalizeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeConditionManager) FinalizeCallCount() int {
	fake.finalizeMutex.RLock()
	defer fake.finalizeMutex.RUnlock()
	return len(fake.finalizeArgsForCall)
}

func (fake *FakeConditionManager) FinalizeCalls(stub func() ([]v1.Condition, bool)) {
	fake.finalizeMutex.Lock()
	defer fake.finalizeMutex.Unlock()
	fake.FinalizeStub = stub
}

func (fake *FakeConditionManager) FinalizeReturns(result1 []v1.Condition, result2 bool) {
	fake.finalizeMutex.Lock()
	defer fake.finalizeMutex.Unlock()
	fake.FinalizeStub = nil
	fake.finalizeReturns = struct {
		result1 []v1.Condition
		result2 bool
	}{result1, result2}
}

func (fake *FakeConditionManager) FinalizeReturnsOnCall(i int, result1 []v1.Condition, result2 bool) {
	fake.finalizeMutex.Lock()
	defer fake.finalizeMutex.Unlock()
	fake.FinalizeStub = nil
	if fake.finalizeReturnsOnCall == nil {
		fake.finalizeReturnsOnCall = make(map[int]struct {
			result1 []v1.Condition
			result2 bool
		})
	}
	fake.finalizeReturnsOnCall[i] = struct {
		result1 []v1.Condition
		result2 bool
	}{result1, result2}
}

func (fake *FakeConditionManager) IsSuccessful() bool {
	fake.isSuccessfulMutex.Lock()
	ret, specificReturn := fake.isSuccessfulReturnsOnCall[len(fake.isSuccessfulArgsForCall)]
	fake.isSuccessfulArgsForCall = append(fake.isSuccessfulArgsForCall, struct {
	}{})
	stub := fake.IsSuccessfulStub
	fakeReturns := fake.isSuccessfulReturns
	fake.recordInvocation("IsSuccessful", []interface{}{})
	fake.isSuccessfulMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConditionManager) IsSuccessfulCallCount() int {
	fake.isSuccessfulMutex.RLock()
	defer fake.isSuccessfulMutex.RUnlock()
	return len(fake.isSuccessfulArgsForCall)
}

func (fake *FakeConditionManager) IsSuccessfulCalls(stub func() bool) {
	fake.isSuccessfulMutex.Lock()
	defer fake.isSuccessfulMutex.Unlock()
	fake.IsSuccessfulStub = stub
}

func (fake *FakeConditionManager) IsSuccessfulReturns(result1 bool) {
	fake.isSuccessfulMutex.Lock()
	defer fake.isSuccessfulMutex.Unlock()
	fake.IsSuccessfulStub = nil
	fake.isSuccessfulReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeConditionManager) IsSuccessfulReturnsOnCall(i int, result1 bool) {
	fake.isSuccessfulMutex.Lock()
	defer fake.isSuccessfulMutex.Unlock()
	fake.IsSuccessfulStub = nil
	if fake.isSuccessfulReturnsOnCall == nil {
		fake.isSuccessfulReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isSuccessfulReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeConditionManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	fake.addNegativeMutex.RLock()
	defer fake.addNegativeMutex.RUnlock()
	fake.addPositiveMutex.RLock()
	defer fake.addPositiveMutex.RUnlock()
	fake.finalizeMutex.RLock()
	defer fake.finalizeMutex.RUnlock()
	fake.isSuccessfulMutex.RLock()
	defer fake.isSuccessfulMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConditionManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ conditions.ConditionManager = new(FakeConditionManager)
