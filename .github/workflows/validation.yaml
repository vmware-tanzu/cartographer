# Copyright 2021 VMware
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: validation
on:
  pull_request:
    branches: [main]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with: {fetch-depth: 0}

      - name: set up Go
        uses: actions/setup-go@v2
        with: {go-version: '^1.17.1'}

      - name: check copyright header
        run: |-
          make copyright
          [ -z "$(git status --porcelain)" ] || git diff HEAD --exit-code

      - name: check all generables were regenerated and commited
        run: |-
          make gen-manifests gen-objects test-gen-manifests test-gen-objects generate
          [ -z "$(git status --porcelain)" ] || git diff HEAD --exit-code

      - name: lint
        run: |-
          make lint
          [ -z "$(git status --porcelain)" ] || git diff HEAD --exit-code

      - name: setup base dependencies
        run: |-
          sudo apt update && sudo apt install -y curl tar
          ./hack/ci/install-binaries.sh ko kubebuilder kuttl tree grype

      - name: setup carvel tooling binaries
        uses: vmware-tanzu/carvel-setup-action@v1

      - name: run tests
        env:
          KUBEBUILDER_ASSETS: /usr/local/bin
          CI: true
        run: make test

      - name: run e2e example
        run: |-
          sudo ./hack/ci/trust-local-registry.sh
          ./hack/setup.sh cluster cartographer example-dependencies example

      - name: scan source
        run: |-
          grype .

      - name: scan image
        env:
          DOCKER_CONFIG: /tmp/cartographer-docker
        run: |-
          grype $(cat ./release/cartographer.yaml | grep ' image: ' | awk '{print $NF}')
