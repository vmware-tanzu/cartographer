# Copyright 2021 VMware
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: carto.run/v1alpha1
kind: ClusterConfigTemplate
metadata:
  name: app-config
spec:
  configPath: .data.manifest

  ytt: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:yaml", "yaml")
    #@ load("@ytt:json", "json")
    #@ load("@ytt:base64", "base64")
    
    #@ def manifest():
    manifest.yaml: #@ yaml.encode(service()) + "---\n" + yaml.encode(config())
    #@ end
    
    #@ def service():
    apiVersion: serving.knative.dev/v1
    kind: Service
    metadata:
      name: #@ data.values.workload.metadata.name
      labels:
        #@ if hasattr(data.values.workload.metadata, "labels"):
        #@ if hasattr(data.values.workload.metadata.labels, "app.kubernetes.io/part-of"):
        app.kubernetes.io/part-of: #@ data.values.workload.metadata.labels["app.kubernetes.io/part-of"]
        #@ end
        #@ end
        carto.run/workload-name: #@ data.values.workload.metadata.name
        app.kubernetes.io/component: run
    spec:
      template:
        metadata:
          annotations:
            autoscaling.knative.dev/minScale: '1'
        spec:
          containers:
            - name: workload
              image: #@ data.values.image
              securityContext:
                runAsUser: 1000
          imagePullSecrets:
            - name: registry-credentials
    #@ end
    
    #@ def config():
    apiVersion: kapp.k14s.io/v1alpha1
    kind: Config
    rebaseRules:
      - path:
          - metadata
          - annotations
          - serving.knative.dev/creator
        type: copy
        sources: [new, existing]
        resourceMatchers: &matchers
          - apiVersionKindMatcher:
              apiVersion: serving.knative.dev/v1
              kind: Service
      - path:
          - metadata
          - annotations
          - serving.knative.dev/lastModifier
        type: copy
        sources: [new, existing]
        resourceMatchers: *matchers
    #@ end

    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: #@ data.values.workload.metadata.name
    data:
      manifest: #@ base64.encode(json.encode(manifest()))
