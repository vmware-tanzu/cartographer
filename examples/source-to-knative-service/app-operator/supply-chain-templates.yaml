# Copyright 2021 VMware
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#@ load("@ytt:data", "data")
---

#
#
# `source` instantiates a GitRepository object, responsible for keeping track
# of commits made to a git repository, making them available as blobs to
# further resources in the supply chain.
#
#
apiVersion: carto.run/v1alpha1
kind: ClusterSourceTemplate
metadata:
  name: source
spec:
  urlPath: .status.artifact.url
  revisionPath: .status.artifact.revision

  template:
    apiVersion: source.toolkit.fluxcd.io/v1beta1
    kind: GitRepository
    metadata:
      name: $(workload.metadata.name)$
    spec:
      interval: 1m0s
      url: $(workload.spec.source.git.url)$
      ref: $(workload.spec.source.git.ref)$
      gitImplementation: libgit2
      ignore: ""


---
#
#
# `test` instantiates a Runnable object, responsible for submitting to
# Kubernetes "pipeline invocation objects" (tekton's PipelineRun objects) that
# run tests against the source code.
#
# Taking a `source` as input and passing that through as `output` if
# successfull makes this template a gate that will effectively block a given
# commit from moving forward in the supply chain in case tests fail.
#
#
---
apiVersion: carto.run/v1alpha1
kind: ClusterSourceTemplate
metadata:
  name: test
spec:
  urlPath: .status.outputs.url
  revisionPath: .status.outputs.revision

  template:
    apiVersion: carto.run/v1alpha1
    kind: Runnable
    metadata:
      name: $(workload.metadata.name)$
    spec:
      serviceAccountName: $(workload.spec.serviceAccountName)$

      runTemplateRef:
        name: tekton-pipelinerun

      selector:
        resource:
          apiVersion: tekton.dev/v1beta1
          kind: Task
        matchingLabels:
          apps.tanzu.vmware.com/task: test

      inputs:
        source: $(source)$
        params:
          - name: blob-url
            value: $(source.url)$
          - name: blob-revision
            value: $(source.revision)$


---
#
#
# `image` instantiates a `kpack/Image` object, responsible for ensuring that
# there's a container image built and pushed to a container image registry
# whenever there's either new source code, or its image builder gets na update.
#
#
apiVersion: carto.run/v1alpha1
kind: ClusterImageTemplate
metadata:
  name: image
spec:
  params:
    - name: image_prefix
      default: projectcartographer/demo-

  imagePath: .status.latestImage

  template:
    apiVersion: kpack.io/v1alpha2
    kind: Image
    metadata:
      name: $(workload.metadata.name)$
    spec:
      tag: $(params.image_prefix)$$(workload.metadata.name)$
      serviceAccountName: service-account
      builder:
        kind: ClusterBuilder
        name: go-builder
      source:
        blob:
          url: $(sources.source.url)$
      build:
        env: $(workload.spec.build.env)$

---
#
#
# `app-deploy` instantiates a `kapp-ctrl/App` making use of an image that comes
# as input in the form of `$(images.image.image)$`.
#
# the use of `App` here is important because of how `knative` updates the
# knative service under the hood to include some extra annotations that _can't_
# be mutated once applied by knative's controller. As `kapp` is able to be
# configured to not patch certain features (something `cartographer` can't
# yet), we're able to bridge that gap with the use of `kapp-ctrl/App`.
#
#
apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  name: app-deploy
spec:
  template:
    apiVersion: kappctrl.k14s.io/v1alpha1
    kind: App
    metadata:
      name: $(workload.metadata.name)$
    spec:
      serviceAccountName: service-account
      fetch:
        - inline:
            paths:
              manifest.yml: |
                ---
                apiVersion: kapp.k14s.io/v1alpha1
                kind: Config
                rebaseRules:
                  - path:
                      - metadata
                      - annotations
                      - serving.knative.dev/creator
                    type: copy
                    sources: [new, existing]
                    resourceMatchers: &matchers
                      - apiVersionKindMatcher:
                          apiVersion: serving.knative.dev/v1
                          kind: Service
                  - path:
                      - metadata
                      - annotations
                      - serving.knative.dev/lastModifier
                    type: copy
                    sources: [new, existing]
                    resourceMatchers: *matchers

                ---
                apiVersion: serving.knative.dev/v1
                kind: Service
                metadata:
                  name: $(workload.metadata.name)$
                spec:
                  template:
                    metadata:
                      annotations:
                        autoscaling.knative.dev/minScale: "1"
                    spec:
                      serviceAccountName: service-account
                      containers:
                        - name: workload
                          image: $(images.image.image)$
                          securityContext:
                            runAsUser: 1000
      template:
        - ytt: {}
      deploy:
        - kapp: {}
