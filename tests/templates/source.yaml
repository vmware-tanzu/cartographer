#@ load("@ytt:data", "data")

#@ if/end "source-template" not in data.values.excluded_templates:
---
apiVersion: carto.run/v1alpha1
kind: ClusterSourceTemplate
metadata:
  name: source-template
spec:
  params:
    - name: serviceAccount
      default: default
    - name: gitImplementation
      default: go-git

  urlPath: .status.artifact.url
  revisionPath: .status.artifact.revision

  healthRule:
    singleConditionType: Ready

  ytt: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:yaml", "yaml")

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def param(key):
    #@   if not key in data.values.params:
    #@     return None
    #@   end
    #@   return data.values.params[key]
    #@ end

    #@ def maven_param(key):
    #@   if not key in data.values.params["maven"]:
    #@     return None
    #@   end
    #@   return data.values.params["maven"][key]
    #@ end

    #@ if/end param("maven"):
    ---
    apiVersion: source.apps.tanzu.vmware.com/v1alpha1
    kind: MavenArtifact
    metadata:
      name: #@ data.values.workload.metadata.name
      labels: #@ merge_labels({ "app.kubernetes.io/component": "source" })
    spec:
      interval: 1m0s

      repository:
        url: #@ param("maven_repository_url")
        #@ if/end param("maven_repository_secret_name"):
        secretRef:
          name: #@ param("maven_repository_secret_name")

      #@ if/end maven_param("artifactRetryTimeout"):
      timeout: #@ maven_param("artifactRetryTimeout")

      artifact:
        artifactId: #@ maven_param("artifactId")
        groupId: #@ maven_param("groupId")
        version: #@ maven_param("version")

        #@ if/end maven_param("type"):
        type: #@ maven_param("type")

        #@ if/end maven_param("classifier"):
        classifier: #@ maven_param("classifier")


    #@ if hasattr(data.values.workload.spec, "source"):
    #@ if/end hasattr(data.values.workload.spec.source, "git"):
    ---
    apiVersion: source.toolkit.fluxcd.io/v1beta1
    kind: GitRepository
    metadata:
      name: #@ data.values.workload.metadata.name
      labels: #@ merge_labels({ "app.kubernetes.io/component": "source" })
    spec:
      interval: 1m0s
      url: #@ data.values.workload.spec.source.git.url
      ref: #@ data.values.workload.spec.source.git.ref
      gitImplementation: #@ data.values.params.gitImplementation
      ignore: |
        !.git
      #@ if/end param("gitops_ssh_secret"):
      secretRef:
        name: #@ param("gitops_ssh_secret")
    #@ end


    #@ if hasattr(data.values.workload.spec, "source"):
    #@ if/end hasattr(data.values.workload.spec.source, "image"):
    ---
    apiVersion: source.apps.tanzu.vmware.com/v1alpha1
    kind: ImageRepository
    metadata:
      name: #@ data.values.workload.metadata.name
      labels: #@ merge_labels({ "app.kubernetes.io/component": "source" })
    spec:
      serviceAccountName: #@ data.values.params.serviceAccount
      interval: 1m0s
      image: #@ data.values.workload.spec.source.image
    #@ end
