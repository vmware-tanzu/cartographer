var ge=Object.defineProperty;var X=Object.getOwnPropertySymbols;var he=Object.prototype.hasOwnProperty,ye=Object.prototype.propertyIsEnumerable;var Q=(t,e,r)=>e in t?ge(t,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[e]=r,V=(t,e)=>{for(var r in e||(e={}))he.call(e,r)&&Q(t,r,e[r]);if(X)for(var r of X(e))ye.call(e,r)&&Q(t,r,e[r]);return t};import{S as M,i as P,s as D,c as ee,e as d,a as I,b as f,d as W,f as h,g as k,u as te,h as re,j as ne,t as x,k as T,l as y,o as Z,m as H,n as S,r as se,p as be,q as j,v as K,w as G,x as ve,y as we,z as ke,A as _e,B as E,C as N,D as A,E as q,F as Ce,G as xe,H as Y,I as Se,J as $e,U as oe,K as C,L as ae,M as Te,N as Ie,O as Le,P as Me,Q as Pe,R as De,T as b,V as ie,W as Re,X as Ee,Y as v,Z as w,_ as z,$ as B,a0 as Ne,a1 as Ae,a2 as Fe,a3 as Oe,a4 as je}from"./vendor.394d6d4c.js";const Ke=function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))n(s);new MutationObserver(s=>{for(const o of s)if(o.type==="childList")for(const i of o.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&n(i)}).observe(document,{childList:!0,subtree:!0});function r(s){const o={};return s.integrity&&(o.integrity=s.integrity),s.referrerpolicy&&(o.referrerPolicy=s.referrerpolicy),s.crossorigin==="use-credentials"?o.credentials="include":s.crossorigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function n(s){if(s.ep)return;s.ep=!0;const o=r(s);fetch(s.href,o)}};Ke();const qe=t=>({}),ce=t=>({}),ze=t=>({}),le=t=>({});function Ue(t){let e;return{c(){e=d("div"),e.innerHTML="<em>missing &lt;slot=&quot;left&quot;&gt;</em>",W(e,"text-align","center")},m(r,n){h(r,e,n)},d(r){r&&y(e)}}}function Ve(t){let e;return{c(){e=d("em"),e.textContent='missing <slot="right">'},m(r,n){h(r,e,n)},d(r){r&&y(e)}}}function We(t){let e,r,n,s,o,i,a,c;const l=t[4].left,m=ee(l,t,t[3],le),u=m||Ue(),p=t[4].right,$=ee(p,t,t[3],ce),L=$||Ve();return{c(){e=d("div"),r=d("div"),u&&u.c(),n=I(),s=d("div"),o=I(),i=d("div"),a=d("div"),L&&L.c(),f(r,"class","hidden md:flex flex-col"),W(r,"width",t[2]),f(s,"id","resizeHandler"),f(s,"class","hover:bg-sky-400 bg-sky-700 cursor-col-resize pr-1"),W(a,"text-align","center"),f(i,"class","flex-1 flex flex-col overflow-hidden"),f(e,"class","flex-1 flex overflow-hidden")},m(g,R){h(g,e,R),k(e,r),u&&u.m(r,null),t[5](r),k(e,n),k(e,s),t[6](s),k(e,o),k(e,i),k(i,a),L&&L.m(a,null),c=!0},p(g,[R]){m&&m.p&&(!c||R&8)&&te(m,l,g,g[3],c?ne(l,g[3],R,ze):re(g[3]),le),(!c||R&4)&&W(r,"width",g[2]),$&&$.p&&(!c||R&8)&&te($,p,g,g[3],c?ne(p,g[3],R,qe):re(g[3]),ce)},i(g){c||(x(u,g),x(L,g),c=!0)},o(g){T(u,g),T(L,g),c=!1},d(g){g&&y(e),u&&u.d(g),t[5](null),t[6](null),L&&L.d(g)}}}function He(t,e,r){let{$$slots:n={},$$scope:s}=e,o,i,a="50%";const c=p=>{const $=p.pageX-i.getBoundingClientRect().left;$>50&&r(2,a=`${$}px`)},l=()=>{window.removeEventListener("mousemove",c)};Z(()=>{o.addEventListener("mousedown",p=>{p.preventDefault(),window.addEventListener("mousemove",c),window.addEventListener("mouseup",l)})});function m(p){H[p?"unshift":"push"](()=>{i=p,r(1,i)})}function u(p){H[p?"unshift":"push"](()=>{o=p,r(0,o)})}return t.$$set=p=>{"$$scope"in p&&r(3,s=p.$$scope)},[o,i,a,s,n,m,u]}class Be extends M{constructor(e){super();P(this,e,He,We,D,{})}}function Ze(t){let e,r;return{c(){e=d("pre"),f(e,"class",r=t[1].class)},m(n,s){h(n,e,s),t[3](e)},p(n,[s]){s&2&&r!==(r=n[1].class)&&f(e,"class",r)},i:S,o:S,d(n){n&&y(e),t[3](null)}}}function Ge(t,e,r){let{doc:n=""}=e,s=null;se.initialize({startOnLoad:!1,theme:"forest"});const o=()=>{try{se.mermaidAPI.render("graph-div",n,a=>{r(0,s.innerHTML=a,s)})}catch{}};Z(()=>{o()}),be(()=>{o()});function i(a){H[a?"unshift":"push"](()=>{s=a,r(0,s)})}return t.$$set=a=>{r(1,e=j(j({},e),K(a))),"doc"in a&&r(2,n=a.doc)},e=K(e),[s,e,n,i]}class Ye extends M{constructor(e){super();P(this,e,Ge,Ze,D,{doc:2})}}const Je=t=>{let e=["flowchart RL","classDef not-found fill:#f66;"],r={};return t.spec.resources&&t.spec.resources.forEach(n=>{if(!n.name)return;let s=`res-${n.name}`,o=`${n.name}`;r[s]=o,e.push(`${s}["${o}"]`),["sources","images","configs"].forEach((i,a)=>{n[i]&&n[i].forEach(c=>{if(r[`res-${c.resource}`])e.push(`${s} --> res-${c.resource}`);else{let l=`not-found-${c.resource}-${a}`;e.push(`${s} --> ${l}`),e.push(`${l}["not-found"]`),e.push(`class ${l} not-found`)}})})}),e.join(`
`)},F=_e(`---
apiVersion: carto.run/v1alpha1
kind: ClusterSupplyChain
metadata:
  name: supply-chain
spec:
  selector:
    app.tanzu.vmware.com/workload-type: web

  resources:
    - name: source-provider
      templateRef:
        kind: ClusterSourceTemplate
        options:
          - name: from-git
            selector:
              matchFields:
                - key: spec.source.git
                  operator: Exists
          - name: from-repo
            selector:
              matchFields:
                - key: spec.source.image
                  operator: Exists

    - name: image-builder
      templateRef:
        kind: ClusterImageTemplate
        name: image
      params:
        - name: image_prefix
          value: "pref-"
      sources:
        - resource: source-provider
          name: source

    - name: config-provider
      templateRef:
        kind: ClusterConfigTemplate
        name: app-config
      images:
        - resource: image-builder
          name: image

    - name: git-writer
      templateRef:
        kind: ClusterTemplate
        name: git-writer
      configs:
        - resource: config-provider
          name: data

`),Xe=G(F,t=>{try{return ve(t)}catch(e){console.log(`could not parse to yaml object: ${e}`)}}),Qe=G(F,t=>{try{let e=new TextEncoder().encode(t),r=we(e,{options:9});return ke(r,!0)}catch(e){console.log(`could not compress document: ${e}`)}}),et=G(Xe,(t,e)=>{try{e(Je(t))}catch(r){console.log(`could not parse to mermaid: ${r}`)}});function tt(t){let e,r;return e=new Ye({props:{doc:t[0],class:t[1].class}}),{c(){E(e.$$.fragment)},m(n,s){N(e,n,s),r=!0},p(n,[s]){const o={};s&1&&(o.doc=n[0]),s&2&&(o.class=n[1].class),e.$set(o)},i(n){r||(x(e.$$.fragment,n),r=!0)},o(n){T(e.$$.fragment,n),r=!1},d(n){A(e,n)}}}function rt(t,e,r){let n;return q(t,et,s=>r(0,n=s)),t.$$set=s=>{r(1,e=j(j({},e),K(s)))},e=K(e),[n,e]}class nt extends M{constructor(e){super();P(this,e,rt,tt,D,{})}}function st(t){let e,r,n,s,o,i,a;return{c(){e=d("h1"),e.innerHTML='<span class="uppercase">Cartographer Live Editor Help</span>',r=I(),n=d("p"),n.innerHTML=`This editor is a spike to gauge interest and investigate the possibilities.

    Provide feedback by commenting on the
    <a href="https://github.com/vmware-tanzu/cartographer/issues/566" target="_blank" class="underline text-blue-700 hover:text-orange-700">original issue</a>, but please make sure you don&#39;t report
    something already captured.`,s=I(),o=d("h2"),o.textContent="Shortcuts",i=I(),a=d("div"),a.innerHTML=`<div class="text-right">Autocomplete</div> 
    <div><kbd class="svelte-1t0r1ka">Ctrl</kbd> + <kbd class="svelte-1t0r1ka">Space</kbd></div> 
    <div class="text-right">Show info</div> 
    <div><kbd class="svelte-1t0r1ka">Cmd</kbd> + <kbd class="svelte-1t0r1ka">K</kbd>, <kbd class="svelte-1t0r1ka">Cmd</kbd> + <kbd class="svelte-1t0r1ka">I</kbd></div> 
    <div class="text-right">Command Palette</div> 
    <div><kbd class="svelte-1t0r1ka">F1</kbd></div>`,f(e,"class","text-md pb-2"),f(n,"class","text-sm pt-1"),f(o,"class","text-md pt-3 pb-2"),f(a,"class","grid grid-cols-2 gap-x-3 gap-y-3 w-full text-sm")},m(c,l){h(c,e,l),h(c,r,l),h(c,n,l),h(c,s,l),h(c,o,l),h(c,i,l),h(c,a,l)},p:S,i:S,o:S,d(c){c&&y(e),c&&y(r),c&&y(n),c&&y(s),c&&y(o),c&&y(i),c&&y(a)}}}function ot(t){return navigator.platform.toUpperCase().indexOf("MAC")>=0,[]}class at extends M{constructor(e){super();P(this,e,ot,st,D,{})}}function it(t){let e,r,n,s,o;return{c(){e=d("h1"),e.innerHTML='<span class="uppercase">Link copied to clipboard!</span>',r=I(),n=d("form"),s=d("input"),o=Ce(`
    was copied to your clipboard!`),f(e,"class","text-md pb-2"),f(s,"class","p-2 border-2 border-sky-700 w-full"),f(s,"type","text"),s.value=window.location.href},m(i,a){h(i,e,a),h(i,r,a),h(i,n,a),k(n,s),k(n,o)},p:S,i:S,o:S,d(i){i&&y(e),i&&y(r),i&&y(n)}}}class ct extends M{constructor(e){super();P(this,e,null,it,D,{})}}function lt(t){let e,r,n;return{c(){e=d("button"),e.textContent="Share",f(e,"class","text-lg no-underline text-grey-darkest hover:text-orange-300 ml-2")},m(s,o){h(s,e,o),r||(n=Y(e,"click",function(){$e(t[7])&&t[7].apply(this,arguments)}),r=!0)},p(s,o){t=s},d(s){s&&y(e),r=!1,n()}}}function ut(t){let e,r,n,s,o,i,a,c,l,m;return o=new xe({props:{text:t[0],$$slots:{default:[lt,({copy:u})=>({7:u}),({copy:u})=>u?128:0]},$$scope:{ctx:t}}}),o.$on("copy",t[3]),o.$on("fail",t[4]),{c(){e=d("nav"),r=d("div"),r.innerHTML=`<h1 class="text-lg uppercase">Cartographer Live Editor</h1>
        \xA0\xA0
        <p class="text-sm">v0.0.1</p>`,n=I(),s=d("div"),E(o.$$.fragment),i=I(),a=d("button"),a.textContent="Help",f(r,"class","mb-2 sm:mb-0 flex sm:items-baseline"),f(a,"class","text-lg no-underline text-grey-darkest hover:text-orange-300 ml-2"),f(e,"class","font-sans flex flex-col text-center sm:flex-row sm:text-left sm:justify-between py-2 px-6 bg-sky-700 text-sky-50 shadow sm:items-baseline w-full")},m(u,p){h(u,e,p),k(e,r),k(e,n),k(e,s),N(o,s,null),k(s,i),k(s,a),c=!0,l||(m=Y(a,"click",t[5]),l=!0)},p(u,[p]){const $={};p&1&&($.text=u[0]),p&384&&($.$$scope={dirty:p,ctx:u}),o.$set($)},i(u){c||(x(o.$$.fragment,u),c=!0)},o(u){T(o.$$.fragment,u),c=!1},d(u){u&&y(e),A(o),l=!1,m()}}}function dt(t,e,r){let n;q(t,F,m=>r(2,n=m));const{open:s}=Se("simple-modal");let o;const i=()=>window.location.href,a=()=>s(ct),c=()=>alert("Something went wrong with the copy to clipboard, sorry!"),l=()=>s(at);return t.$$.update=()=>{t.$$.dirty&4&&r(0,o=i())},[o,s,n,a,c,l]}class mt extends M{constructor(e){super();P(this,e,dt,ut,D,{})}}function pt(t){let e,r;return{c(){e=d("div"),f(e,"class",r="monaco-editor-container "+t[1].class+" svelte-oc3rgm")},m(n,s){h(n,e,s),t[2](e)},p(n,[s]){s&2&&r!==(r="monaco-editor-container "+n[1].class+" svelte-oc3rgm")&&f(e,"class",r)},i:S,o:S,d(n){n&&y(e),t[2](null)}}}function ft(t,e,r){let n;q(t,F,l=>r(4,n=l));let s,o;const i=oe.parse("https://cartographer.sh/file.yaml"),a=C.getModel(i)||C.createModel("","yaml",i);Z(()=>{a.setValue(n),s=C.create(o,{automaticLayout:!0,model:a}),s.onDidChangeModelContent(l=>{ae(F,n=s.getValue(),n)})});function c(l){H[l?"unshift":"push"](()=>{o=l,r(0,o)})}return t.$$set=l=>{r(1,e=j(j({},e),K(l)))},e=K(e),[o,e,c]}class gt extends M{constructor(e){super();P(this,e,ft,pt,D,{})}}const{window:ht}=Ie;function ue(t){let e,r;return e=new Be({props:{$$slots:{right:[bt],left:[yt]},$$scope:{ctx:t}}}),{c(){E(e.$$.fragment)},m(n,s){N(e,n,s),r=!0},i(n){r||(x(e.$$.fragment,n),r=!0)},o(n){T(e.$$.fragment,n),r=!1},d(n){A(e,n)}}}function yt(t){let e,r;return e=new gt({props:{slot:"left",class:"h-full m-2"}}),{c(){E(e.$$.fragment)},m(n,s){N(e,n,s),r=!0},p:S,i(n){r||(x(e.$$.fragment,n),r=!0)},o(n){T(e.$$.fragment,n),r=!1},d(n){A(e,n)}}}function bt(t){let e,r;return e=new nt({props:{slot:"right",class:"content-center"}}),{c(){E(e.$$.fragment)},m(n,s){N(e,n,s),r=!0},p:S,i(n){r||(x(e.$$.fragment,n),r=!0)},o(n){T(e.$$.fragment,n),r=!1},d(n){A(e,n)}}}function vt(t){let e,r,n,s;r=new mt({});let o=t[0]&&ue(t);return{c(){e=d("div"),E(r.$$.fragment),n=I(),o&&o.c(),f(e,"class","h-full flex flex-col overflow-hidden")},m(i,a){h(i,e,a),N(r,e,null),k(e,n),o&&o.m(e,null),s=!0},p(i,a){i[0]?o?a&1&&x(o,1):(o=ue(i),o.c(),x(o,1),o.m(e,null)):o&&(Le(),T(o,1,1,()=>{o=null}),Me())},i(i){s||(x(r.$$.fragment,i),x(o),s=!0)},o(i){T(r.$$.fragment,i),T(o),s=!1},d(i){i&&y(e),A(r),o&&o.d()}}}function wt(t){let e,r,n,s,o;return r=new Te({props:{unstyled:!0,closeButton:!1,classBg:"fixed top-0 left-0 w-screen h-screen flex flex-col justify-center bg-gray-400/[.6] z-50",classWindowWrap:"relative m-2 max-h-full",classWindow:"relative w-1/3 max-w-full max-h-full my-2 mx-auto text-black border border-sky-600 shadow-lg bg-white",classContent:"relative p-2 overflow-auto",$$slots:{default:[vt]},$$scope:{ctx:t}}}),{c(){e=d("main"),E(r.$$.fragment),f(e,"class","h-screen")},m(i,a){h(i,e,a),N(r,e,null),n=!0,s||(o=Y(ht,"load",t[1]),s=!0)},p(i,[a]){const c={};a&33&&(c.$$scope={dirty:a,ctx:i}),r.$set(c)},i(i){n||(x(r.$$.fragment,i),n=!0)},o(i){T(r.$$.fragment,i),n=!1},d(i){i&&y(e),A(r),s=!1,o()}}}function kt(t,e,r){let n,s;q(t,F,c=>r(3,n=c)),q(t,Qe,c=>r(2,s=c));let o=!1;const i=(c,l)=>{if(!c||!l)return;let m=new URL(window.location.href);m.searchParams.set("pako",l),window.history.pushState("","",m)},a=()=>{let l=new URL(window.location.href).searchParams.get("pako");l&&ae(F,n=Pe(De(l),{to:"string"}),n),r(0,o=!0)};return t.$$.update=()=>{t.$$.dirty&5&&i(o,s)},[o,a,s]}class _t extends M{constructor(e){super();P(this,e,kt,wt,D,{})}}var _="yaml";function Ct(t){switch(t){case B.Error:return z.Error;case B.Warning:return z.Warning;case B.Information:return z.Info;case B.Hint:return z.Hint;default:return z.Info}}function xt(t){return{severity:Ct(t.severity),startLineNumber:t.range.start.line+1,startColumn:t.range.start.character+1,endLineNumber:t.range.end.line+1,endColumn:t.range.end.character+1,message:t.message,code:String(t.code),source:t.source}}function St(t,e){const r=new Map,n=async a=>{(await t()).resetSchema(String(a))},s=async a=>{const m=(await(await t(a)).doValidation(String(a))).map(xt),u=C.getModel(a);u&&u.getLanguageId()===_&&C.setModelMarkers(u,_,m)},o=a=>{if(a.getLanguageId()!==_)return;let c;r.set(String(a.uri),a.onDidChangeContent(()=>{clearTimeout(c),c=setTimeout(()=>s(a.uri),500)})),s(a.uri)},i=a=>{C.setModelMarkers(a,_,[]);const c=String(a.uri),l=r.get(c);l&&(l.dispose(),r.delete(c))};C.onDidCreateModel(o),C.onWillDisposeModel(a=>{i(a),n(a.uri)}),C.onDidChangeModelLanguage(a=>{i(a.model),o(a.model),n(a.model.uri)}),e.onDidChange(()=>{for(const a of C.getModels())a.getLanguageId()===_&&(i(a),o(a))});for(const a of C.getModels())o(a)}function J(t){if(!!t)return{character:t.column-1,line:t.lineNumber-1}}function O(t){if(!!t)return new ie(t.start.line+1,t.start.character+1,t.end.line+1,t.end.character+1)}function $t(t){const e=b.CompletionItemKind;switch(t){case v.Text:return e.Text;case v.Method:return e.Method;case v.Function:return e.Function;case v.Constructor:return e.Constructor;case v.Field:return e.Field;case v.Variable:return e.Variable;case v.Class:return e.Class;case v.Interface:return e.Interface;case v.Module:return e.Module;case v.Property:return e.Property;case v.Unit:return e.Unit;case v.Value:return e.Value;case v.Enum:return e.Enum;case v.Keyword:return e.Keyword;case v.Snippet:return e.Snippet;case v.Color:return e.Color;case v.File:return e.File;case v.Reference:return e.Reference;default:return e.Property}}function de(t){if(!!t)return{range:O(t.range),text:t.newText}}function Tt(t){return{triggerCharacters:[" ",":"],async provideCompletionItems(e,r){const n=e.uri,o=await(await t(n)).doComplete(String(n),J(r));if(!o)return;const i=e.getWordUntilPosition(r),a=new ie(r.lineNumber,i.startColumn,r.lineNumber,i.endColumn),c=o.items.map(l=>{const m={label:l.label,insertText:l.insertText||l.label,sortText:l.sortText,filterText:l.filterText,documentation:l.documentation,detail:l.detail,kind:$t(l.kind),range:a};return l.textEdit&&(m.range=O("range"in l.textEdit?l.textEdit.range:l.textEdit.replace),m.insertText=l.textEdit.newText),l.additionalTextEdits&&(m.additionalTextEdits=l.additionalTextEdits.map(de)),l.insertTextFormat===Re.Snippet&&(m.insertTextRules=b.CompletionItemInsertTextRule.InsertAsSnippet),m});return{incomplete:o.isIncomplete,suggestions:c}}}}function It(t){return{async provideDefinition(e,r){const n=e.uri,o=await(await t(n)).doDefinition(String(n),J(r));return o==null?void 0:o.map(i=>({originSelectionRange:i.originSelectionRange,range:O(i.targetRange),targetSelectionRange:i.targetSelectionRange,uri:oe.parse(i.targetUri)}))}}}function Lt(t){return{async provideHover(e,r){const n=e.uri,o=await(await t(n)).doHover(String(n),J(r));if(!!o)return{range:O(o.range),contents:[{value:o.contents.value}]}}}}function Mt(t){const e=b.SymbolKind;switch(t){case w.File:return e.Array;case w.Module:return e.Module;case w.Namespace:return e.Namespace;case w.Package:return e.Package;case w.Class:return e.Class;case w.Method:return e.Method;case w.Property:return e.Property;case w.Field:return e.Field;case w.Constructor:return e.Constructor;case w.Enum:return e.Enum;case w.Interface:return e.Interface;case w.Function:return e.Function;case w.Variable:return e.Variable;case w.Constant:return e.Constant;case w.String:return e.String;case w.Number:return e.Number;case w.Boolean:return e.Boolean;case w.Array:return e.Array;default:return e.Function}}function me(t){return{detail:t.detail||"",range:O(t.range),name:t.name,kind:Mt(t.kind),selectionRange:O(t.selectionRange),children:t.children.map(me),tags:[]}}function Pt(t){return{async provideDocumentSymbols(e){const r=e.uri,s=await(await t(r)).findDocumentSymbols(String(r));if(!!s)return s.map(me)}}}function Dt(t){return V({tabSize:t.tabSize,insertSpaces:t.insertSpaces},t)}function Rt(t){return{async provideDocumentFormattingEdits(e,r){const n=e.uri,o=await(await t(n)).format(String(n),Dt(r));if(!(!o||o.length===0))return o.map(de)}}}function Et(t){return{range:O(t.range),tooltip:t.tooltip,url:t.target}}function Nt(t){return{async provideLinks(e){const r=e.uri;return{links:(await(await t(r)).findLinks(String(r))).map(Et)}}}}var At=2*60*1e3;function Ft(t){let e,r,n=0;const s=()=>{e&&(e.dispose(),e=void 0),r=void 0};setInterval(()=>{if(!e)return;Date.now()-n>At&&s()},30*1e3),t.onDidChange(()=>s());const o=()=>(n=Date.now(),r||(e=C.createWebWorker({moduleId:"vs/language/yaml/yamlWorker",label:t.languageId,createData:{languageSettings:t.diagnosticsOptions,enableSchemaRequest:t.diagnosticsOptions.enableSchemaRequest,isKubernetes:t.diagnosticsOptions.isKubernetes,customTags:t.diagnosticsOptions.customTags}}),r=e.getProxy()),r);return async(...i)=>{const a=await o();return await e.withSyncedResources(i),a}}var Ot={comments:{lineComment:"#"},brackets:[["{","}"],["[","]"],["(",")"]],autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"}],surroundingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"}],onEnterRules:[{beforeText:/:\s*$/,action:{indentAction:b.IndentAction.Indent}}]};function jt(t){const e=Ft(t);b.registerCompletionItemProvider(_,Tt(e)),b.registerHoverProvider(_,Lt(e)),b.registerDefinitionProvider(_,It(e)),b.registerDocumentSymbolProvider(_,Pt(e)),b.registerDocumentFormattingEditProvider(_,Rt(e)),b.registerLinkProvider(_,Nt(e)),St(e,t),b.setLanguageConfiguration(_,Ot)}var pe={completion:!0,customTags:[],enableSchemaRequest:!1,format:!0,isKubernetes:!1,hover:!0,schemas:[],validate:!0,yamlVersion:"1.2"};function Kt(t){const e=new Ee;let r=t;const n={get onDidChange(){return e.event},get languageId(){return _},get diagnosticsOptions(){return r},setDiagnosticsOptions(s){r=V(V({},pe),s),e.fire(n)}};return n}var fe=Kt(pe);function qt(){return{yamlDefaults:fe}}b.yaml=qt();b.register({id:_,extensions:[".yaml",".yml"],aliases:["YAML","yaml","YML","yml"],mimetypes:["application/x-yaml"]});b.onLanguage("yaml",()=>{jt(fe)});function zt(t={}){b.yaml.yamlDefaults.setDiagnosticsOptions(t)}function Ut(){return new Worker("/live-editor/assets/yaml.worker.241bdf2d.js",{type:"module"})}const Vt={properties:{apiVersion:{description:"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",type:"string"},kind:{description:"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",type:"string"},metadata:{type:"object"},spec:{description:"Spec describes the suppply chain. More info: https://cartographer.sh/docs/latest/reference/workload/#clustersupplychain",properties:{params:{description:"Additional parameters. See: https://cartographer.sh/docs/latest/architecture/#parameter-hierarchy",items:{properties:{default:{description:"DefaultValue of the parameter. Causes the parameter to be optional; If the Owner does not specify this parameter, this value is used.","x-kubernetes-preserve-unknown-fields":!0},name:{description:"Name of the parameter. Should match a template parameter name.",type:"string"},value:{description:"Value of the parameter. If specified, owner properties are ignored.","x-kubernetes-preserve-unknown-fields":!0}},required:["name"],type:"object"},type:"array"},resources:{description:"Resources that are responsible for bringing the application to a deliverable state.",items:{properties:{configs:{description:`Configs is a list of references to other 'config' resources in this list. A config resource has the kind ClusterConfigTemplate 
 In a template, configs can be consumed as: $(configs.<name>.config)$ 
 If there is only one image, it can be consumed as: $(config)$`,items:{properties:{name:{type:"string"},resource:{type:"string"}},required:["name","resource"],type:"object"},type:"array"},images:{description:`Images is a list of references to other 'image' resources in this list. An image resource has the kind ClusterImageTemplate 
 In a template, images can be consumed as: $(images.<name>.image)$ 
 If there is only one image, it can be consumed as: $(image)$`,items:{properties:{name:{type:"string"},resource:{type:"string"}},required:["name","resource"],type:"object"},type:"array"},name:{description:"Name of the resource. Used as a reference for inputs, as well as being the name presented in workload statuses to identify this resource.",type:"string"},params:{description:`Params are a list of parameters to provide to the template in TemplateRef Template params do not have to be specified here, unless you want to force a particular value, or add a default value. 
 Parameters are consumed in a template with the syntax: $(params.<name>)$`,items:{properties:{default:{description:"DefaultValue of the parameter. Causes the parameter to be optional; If the Owner does not specify this parameter, this value is used.","x-kubernetes-preserve-unknown-fields":!0},name:{description:"Name of the parameter. Should match a template parameter name.",type:"string"},value:{description:"Value of the parameter. If specified, owner properties are ignored.","x-kubernetes-preserve-unknown-fields":!0}},required:["name"],type:"object"},type:"array"},sources:{description:`Sources is a list of references to other 'source' resources in this list. A source resource has the kind ClusterSourceTemplate 
 In a template, sources can be consumed as: $(sources.<name>.url)$ and $(sources.<name>.revision)$ 
 If there is only one source, it can be consumed as: $(source.url)$ and $(source.revision)$`,items:{properties:{name:{type:"string"},resource:{type:"string"}},required:["name","resource"],type:"object"},type:"array"},templateRef:{description:"TemplateRef identifies the template used to produce this resource",properties:{kind:{description:"Kind of the template to apply",enum:["ClusterSourceTemplate","ClusterImageTemplate","ClusterTemplate","ClusterConfigTemplate"],type:"string"},name:{description:"Name of the template to apply Only one of Name and Options can be specified.",minLength:1,type:"string"},options:{description:"Options is a list of template names and Selectors. The templates must all be of type Kind. A template will be selected if the workload matches the specified Selector. Only one template can be selected. Only one of Name and Options can be specified. Minimum number of items in list is two.",items:{properties:{name:{description:"Name of the template to apply",minLength:1,type:"string"},selector:{description:"Selector is a field query over a workload or deliverable resource.",properties:{matchFields:{description:"MatchFields is a list of field selector requirements. The requirements are ANDed.",items:{properties:{key:{description:'Key is the JSON path in the workload to match against. e.g. for workload: "workload.spec.source.git.url", e.g. for deliverable: "deliverable.spec.source.git.url"',minLength:1,type:"string"},operator:{description:"Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",enum:["In","NotIn","Exists","DoesNotExist"],type:"string"},values:{description:"Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.",items:{type:"string"},type:"array"}},required:["key","operator"],type:"object"},minItems:1,type:"array"}},required:["matchFields"],type:"object"}},required:["name","selector"],type:"object"},minItems:2,type:"array"}},required:["kind"],type:"object"}},required:["name","templateRef"],type:"object"},type:"array"},selector:{additionalProperties:{type:"string"},description:"Specifies the label key-value pairs used to select workloads See: https://cartographer.sh/docs/v0.1.0/architecture/#selectors",type:"object"},serviceAccountRef:{description:`ServiceAccountName refers to the Service account with permissions to create resources submitted by the supply chain. 
 If not set, Cartographer will use serviceAccountName from supply chain. 
 If that is also not set, Cartographer will use the default service account in the workload's namespace.`,properties:{name:{description:"Name of the service account being referred to",type:"string"},namespace:{description:"Namespace of the service account being referred to if omitted, the Owner's namespace is used.",type:"string"}},required:["name"],type:"object"}},required:["resources","selector"],type:"object"},status:{description:"Status conforms to the Kubernetes conventions: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties",properties:{conditions:{items:{description:'Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{ // Represents the observations of a foo\'s current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` \n // other fields }',properties:{lastTransitionTime:{description:"lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",format:"date-time",type:"string"},message:{description:"message is a human readable message indicating details about the transition. This may be an empty string.",maxLength:32768,type:"string"},observedGeneration:{description:"observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",format:"int64",minimum:0,type:"integer",maximum:9223372036854776e3},reason:{description:"reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",maxLength:1024,minLength:1,pattern:"^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",type:"string"},status:{description:"status of the condition, one of True, False, Unknown.",enum:["True","False","Unknown"],type:"string"},type:{description:"type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",maxLength:316,pattern:"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",type:"string"}},required:["lastTransitionTime","message","reason","status","type"],type:"object"},type:"array"},observedGeneration:{format:"int64",type:"integer",minimum:-9223372036854776e3,maximum:9223372036854776e3}},type:"object"}},required:["metadata","spec"],type:"object",$schema:"http://json-schema.org/draft-04/schema#"};C.ITextModel;b.ProviderResult;b.CompletionList;b.CompletionItem;const Wt=/(config|image|source)s:/,Ht=(t,e)=>{if(t.getLineContent(e).search(/\s+resource:/)<0)return null;let s=e;for(;--s>0;){let i=t.getLineContent(s).match(Wt);if(i)return`Cluster${Ne(i[1])}Template`}return null},U=(t,e)=>t.items.find(r=>r.key.value===e),Bt=t=>U(t.contents,"spec"),Zt=t=>U(Bt(t).value,"resources"),Gt=t=>U(U(t,"templateRef").value,"kind").value.value,Yt=(t,e,r)=>{let n=t.getValue(),s=new Fe;try{let o=Ae(n,{keepSourceTokens:!0,lineCounter:s}),a=Zt(o).value.items.filter(c=>s.linePos(c.range[2]).line<r.lineNumber&&Gt(c)===e).map(c=>{let l=U(c,"name").value.value;return{insertText:l,kind:v.Reference,range:null,label:l}});return console.log(a),a}catch{}return[]},Jt=()=>{b.registerCompletionItemProvider("yaml",{triggerCharacters:[" "],provideCompletionItems(t,e){let r=Ht(t,e.lineNumber);return r?{incomplete:!0,suggestions:Yt(t,r,e)}:null}})};window.MonacoEnvironment={getWorker(t,e){switch(e){case"yaml":return new Ut;case"javascript":return new je;default:return new Oe}}};zt({enableSchemaRequest:!0,hover:!0,completion:!0,validate:!0,format:!0,schemas:[{fileMatch:["*.yaml"],schema:Vt}]});Jt();new _t({target:document.body});
