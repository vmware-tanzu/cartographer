---

# APIVersion defines the versioned schema of this representation of an object.
# Servers should convert recognized schemas to the latest internal value, and may
# reject unrecognized values. More info:
# https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
# +optional
apiVersion: carto.run/v1alpha1

# Kind is a string value representing the REST resource this object represents.
# Servers may infer this from the endpoint the client submits requests to. Cannot
# be updated. In CamelCase. More info:
# https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
# +optional
kind: Workload
metadata: {}

# Spec describes the workload. More info:
# https://cartographer.sh/docs/latest/reference/workload/#workload
spec:

  # Build configuration, for the build resources in the supply chain
  # +optional
  build:

    # Env is an array of environment variables to propagate to build resources in
    # the supply chain.
    # +optional
    env:
      - # EnvVar represents an environment variable present in a Container.
        # +optional

        # Name of the environment variable. Must be a C_IDENTIFIER.
        name: <string>

        # Variable references $(VAR_NAME) are expanded using the previously
        # defined environment variables in the container and any service
        # environment variables. If a variable cannot be resolved, the reference
        # in the input string will be unchanged. Double $$ are reduced to a single
        # $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)"
        # will produce the string literal "$(VAR_NAME)". Escaped references will
        # never be expanded, regardless of whether the variable exists or not.
        # Defaults to "".
        # +optional
        value: <string>

        # Source for the environment variable's value. Cannot be used if value is
        # not empty.
        # +optional
        valueFrom:

          # Selects a key of a ConfigMap.
          # +optional
          configMapKeyRef:

            # The key to select.
            key: <string>

            # Name of the referent. More info:
            # https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            # TODO: Add other useful fields. apiVersion, kind, uid?
            # +optional
            name: <string>

            # Specify whether the ConfigMap or its key must be defined
            # +optional
            optional: <boolean>

          # Selects a field of the pod: supports metadata.name,
          # metadata.namespace, `metadata.labels['<KEY>']`,
          # `metadata.annotations['<KEY>']`, spec.nodeName,
          # spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
          # +optional
          fieldRef:

            # Version of the schema the FieldPath is written in terms of, defaults
            # to "v1".
            # +optional
            apiVersion: <string>

            # Path of the field to select in the specified API version.
            fieldPath: <string>

          # Selects a resource of the container: only resources limits and
          # requests (limits.cpu, limits.memory, limits.ephemeral-storage,
          # requests.cpu, requests.memory and requests.ephemeral-storage) are
          # currently supported.
          # +optional
          resourceFieldRef:

            # Container name: required for volumes, optional for env vars
            # +optional
            containerName: <string>

            # Specifies the output format of the exposed resources, defaults to
            # "1"
            # +optional
            divisor: <[integer|string]>

            # Required: resource to select
            resource: <string>

          # Selects a key of a secret in the pod's namespace
          # +optional
          secretKeyRef:

            # The key of the secret to select from.  Must be a valid secret key.
            key: <string>

            # Name of the referent. More info:
            # https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            # TODO: Add other useful fields. apiVersion, kind, uid?
            # +optional
            name: <string>

            # Specify whether the Secret or its key must be defined
            # +optional
            optional: <boolean>

  # Environment variables to be passed to the main container running the
  # application.
  # +optional
  env:
    - # EnvVar represents an environment variable present in a Container.
      # +optional

      # Name of the environment variable. Must be a C_IDENTIFIER.
      name: <string>

      # Variable references $(VAR_NAME) are expanded using the previously defined
      # environment variables in the container and any service environment
      # variables. If a variable cannot be resolved, the reference in the input
      # string will be unchanged. Double $$ are reduced to a single $, which
      # allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
      # produce the string literal "$(VAR_NAME)". Escaped references will never be
      # expanded, regardless of whether the variable exists or not. Defaults to
      # "".
      # +optional
      value: <string>

      # Source for the environment variable's value. Cannot be used if value is
      # not empty.
      # +optional
      valueFrom:

        # Selects a key of a ConfigMap.
        # +optional
        configMapKeyRef:

          # The key to select.
          key: <string>

          # Name of the referent. More info:
          # https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          # TODO: Add other useful fields. apiVersion, kind, uid?
          # +optional
          name: <string>

          # Specify whether the ConfigMap or its key must be defined
          # +optional
          optional: <boolean>

        # Selects a field of the pod: supports metadata.name, metadata.namespace,
        # `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
        # spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP,
        # status.podIPs.
        # +optional
        fieldRef:

          # Version of the schema the FieldPath is written in terms of, defaults
          # to "v1".
          # +optional
          apiVersion: <string>

          # Path of the field to select in the specified API version.
          fieldPath: <string>

        # Selects a resource of the container: only resources limits and requests
        # (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu,
        # requests.memory and requests.ephemeral-storage) are currently supported.
        # +optional
        resourceFieldRef:

          # Container name: required for volumes, optional for env vars
          # +optional
          containerName: <string>

          # Specifies the output format of the exposed resources, defaults to "1"
          # +optional
          divisor: <[integer|string]>

          # Required: resource to select
          resource: <string>

        # Selects a key of a secret in the pod's namespace
        # +optional
        secretKeyRef:

          # The key of the secret to select from.  Must be a valid secret key.
          key: <string>

          # Name of the referent. More info:
          # https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          # TODO: Add other useful fields. apiVersion, kind, uid?
          # +optional
          name: <string>

          # Specify whether the Secret or its key must be defined
          # +optional
          optional: <boolean>

  # Image refers to a pre-built image in a registry. It is an alternative to
  # defining source code.
  # +optional
  image: <string>

  # Additional parameters.
  # +optional
  params:
    - # Name of the parameter. Should match a blueprint or template parameter
      # name.
      name: <string>
      value: <unknown>

  # Resource constraints for the application. See
  # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  # +optional
  resources:

    # Limits describes the maximum amount of compute resources allowed. More info:
    # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    # +optional
    limits: {}

    # Requests describes the minimum amount of compute resources required. If
    # Requests is omitted for a container, it defaults to Limits if that is
    # explicitly specified, otherwise to an implementation-defined value. More
    # info:
    # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    # +optional
    requests: {}

  # ServiceAccountName refers to the Service account with permissions to create
  # resources submitted by the supply chain. 
  # If not set, Cartographer will use serviceAccountName from supply chain. 
  # If that is also not set, Cartographer will use the default service account in
  # the workload's namespace.
  # +optional
  serviceAccountName: <string>

  # ServiceClaims to be bound through ServiceBindings.
  # +optional
  serviceClaims:
    - name: <string>
      ref:
        apiVersion: <string>
        kind: <string>
        name: <string>

  # The location of the source code for the workload. Specify one of `spec.source`
  # or `spec.image`
  # +optional
  source:

    # Source code location in a git repository.
    # +optional
    git:
      ref:
        branch: <string>
        commit: <string>
        tag: <string>
      url: <string>

    # Image is an OCI image is a registry that contains source code OCI Image in a
    # repository, containing the source code to be used throughout the supply
    # chain.
    # +optional
    image: <string>

    # Subpath inside the Git repository or Image to treat as the root of the
    # application. Defaults to the root if left empty.
    # +optional
    subPath: <string>

# Status conforms to the Kubernetes conventions:
# https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties
# +optional
status:

  # Conditions describing this resource's reconcile state. The top level condition
  # is of type `Ready`, and follows these Kubernetes conventions:
  # https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties
  # +optional
  conditions:
    - # Condition contains details for one aspect of the current state of this API
      # Resource. --- This struct is intended for direct use as an array at the
      # field path .status.conditions.  For example, type FooStatus struct{     //
      # Represents the observations of a foo's current state.     // Known
      # .status.conditions.type are: "Available", "Progressing", and "Degraded"   
      # // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map   
      # // +listMapKey=type     Conditions []metav1.Condition
      # `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type"
      # protobuf:"bytes,1,rep,name=conditions"` 
      # // other fields }
      # +optional

      # lastTransitionTime is the last time the condition transitioned from one
      # status to another. This should be when the underlying condition changed. 
      # If that is not known, then using the time when the API field changed is
      # acceptable.
      lastTransitionTime: <string>

      # message is a human readable message indicating details about the
      # transition. This may be an empty string.
      message: <string>

      # observedGeneration represents the .metadata.generation that the condition
      # was set based upon. For instance, if .metadata.generation is currently 12,
      # but the .status.conditions[x].observedGeneration is 9, the condition is
      # out of date with respect to the current state of the instance.
      # +optional
      observedGeneration: <integer>

      # reason contains a programmatic identifier indicating the reason for the
      # condition's last transition. Producers of specific condition types may
      # define expected values and meanings for this field, and whether the values
      # are considered a guaranteed API. The value should be a CamelCase string.
      # This field may not be empty.
      reason: <string>

      # status of the condition, one of True, False, Unknown.
      status: <string>

      # type of condition in CamelCase or in foo.example.com/CamelCase. --- Many
      # .condition.type values are consistent across resources like Available, but
      # because arbitrary conditions can be useful (see .node.status.conditions),
      # the ability to deconflict is important. The regex it matches is
      # (dns1123SubdomainFmt/)?(qualifiedNameFmt)
      type: <string>

  # ObservedGeneration refers to the metadata.Generation of the spec that resulted
  # in the current `status`.
  # +optional
  observedGeneration: <integer>

  # SupplyChainRef is the Supply Chain resource that was used when this status was
  # set.
  # +optional
  supplyChainRef:
    apiVersion: <string>
    kind: <string>
    name: <string>
    namespace: <string>
