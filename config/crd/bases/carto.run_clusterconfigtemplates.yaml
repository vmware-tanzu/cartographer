# Copyright 2021 VMware
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.10.0
  creationTimestamp: null
  name: clusterconfigtemplates.carto.run
spec:
  group: carto.run
  names:
    kind: ClusterConfigTemplate
    listKind: ClusterConfigTemplateList
    plural: clusterconfigtemplates
    shortNames:
    - cct
    singular: clusterconfigtemplate
  scope: Cluster
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: 'Spec describes the config template. More info: https://cartographer.sh/docs/latest/reference/template/#clusterconfigtemplate'
            properties:
              configPath:
                description: 'ConfigPath is a path into the templated object''s data
                  that contains valid yaml. This is typically the information that
                  will configure the components of the deployable image. ConfigPath
                  is specified in jsonpath format, eg: .data'
                type: string
              healthRule:
                description: HealthRule specifies rubric for determining the health
                  of a resource stamped by this template
                properties:
                  alwaysHealthy:
                    description: AlwaysHealthy being set indicates the resource should
                      always be considered healthy
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                  multiMatch:
                    description: MultiMatch specifies explicitly which conditions
                      and/or fields should be used to determine healthiness.
                    properties:
                      healthy:
                        description: Healthy is a HealthMatchRule which stipulates
                          requirements, ALL of which must be met for the resource
                          to be considered healthy.
                        properties:
                          matchConditions:
                            description: MatchConditions are the conditions and statuses
                              to read.
                            items:
                              properties:
                                status:
                                  description: Status is the status of the condition
                                  type: string
                                type:
                                  description: Type is the type of the condition
                                  type: string
                              required:
                              - status
                              - type
                              type: object
                            type: array
                          matchFields:
                            description: MatchFields stipulates a FieldSelectorRequirement
                              for this rule.
                            items:
                              properties:
                                key:
                                  description: 'Key is the JSON path in the workload
                                    to match against. e.g. for workload: "workload.spec.source.git.url",
                                    e.g. for deliverable: "deliverable.spec.source.git.url"'
                                  minLength: 1
                                  type: string
                                messagePath:
                                  description: MessagePath is specified in jsonpath
                                    format. It is evaluated against the resource to
                                    provide a message in the owner's resource condition
                                    if it is the first matching requirement that determine
                                    the current ResourcesHealthy condition status.
                                  type: string
                                operator:
                                  description: Operator represents a key's relationship
                                    to a set of values. Valid operators are In, NotIn,
                                    Exists and DoesNotExist.
                                  enum:
                                  - In
                                  - NotIn
                                  - Exists
                                  - DoesNotExist
                                  type: string
                                values:
                                  description: Values is an array of string values.
                                    If the operator is In or NotIn, the values array
                                    must be non-empty. If the operator is Exists or
                                    DoesNotExist, the values array must be empty.
                                  items:
                                    type: string
                                  type: array
                              required:
                              - key
                              - operator
                              type: object
                            type: array
                        type: object
                      unhealthy:
                        description: Unhealthy is a HealthMatchRule which stipulates
                          requirements, ANY of which, when met, indicate that the
                          resource should be considered unhealthy.
                        properties:
                          matchConditions:
                            description: MatchConditions are the conditions and statuses
                              to read.
                            items:
                              properties:
                                status:
                                  description: Status is the status of the condition
                                  type: string
                                type:
                                  description: Type is the type of the condition
                                  type: string
                              required:
                              - status
                              - type
                              type: object
                            type: array
                          matchFields:
                            description: MatchFields stipulates a FieldSelectorRequirement
                              for this rule.
                            items:
                              properties:
                                key:
                                  description: 'Key is the JSON path in the workload
                                    to match against. e.g. for workload: "workload.spec.source.git.url",
                                    e.g. for deliverable: "deliverable.spec.source.git.url"'
                                  minLength: 1
                                  type: string
                                messagePath:
                                  description: MessagePath is specified in jsonpath
                                    format. It is evaluated against the resource to
                                    provide a message in the owner's resource condition
                                    if it is the first matching requirement that determine
                                    the current ResourcesHealthy condition status.
                                  type: string
                                operator:
                                  description: Operator represents a key's relationship
                                    to a set of values. Valid operators are In, NotIn,
                                    Exists and DoesNotExist.
                                  enum:
                                  - In
                                  - NotIn
                                  - Exists
                                  - DoesNotExist
                                  type: string
                                values:
                                  description: Values is an array of string values.
                                    If the operator is In or NotIn, the values array
                                    must be non-empty. If the operator is Exists or
                                    DoesNotExist, the values array must be empty.
                                  items:
                                    type: string
                                  type: array
                              required:
                              - key
                              - operator
                              type: object
                            type: array
                        type: object
                    required:
                    - healthy
                    - unhealthy
                    type: object
                  singleConditionType:
                    description: SingleConditionType names a single condition which,
                      when True indicates the resource is healthy. When False it is
                      unhealthy. Otherwise, healthiness is Unknown.
                    type: string
                type: object
              lifecycle:
                default: default
                description: Lifecycle specifies whether template modifications should
                  result in originally created objects being updated (`default`) or
                  in new objects created alongside original objects (`immutable` or
                  `tekton`).
                enum:
                - default
                - immutable
                - tekton
                type: string
              params:
                description: 'Additional parameters. See: https://cartographer.sh/docs/latest/architecture/#parameter-hierarchy'
                items:
                  properties:
                    default:
                      description: DefaultValue of the parameter. Causes the parameter
                        to be optional; If the Owner or Template does not specify
                        this parameter, this value is used.
                      x-kubernetes-preserve-unknown-fields: true
                    name:
                      description: Name of a parameter the template accepts from the
                        Blueprint or Owner.
                      type: string
                  required:
                  - default
                  - name
                  type: object
                type: array
              retentionPolicy:
                description: RetentionPolicy specifies how many successful and failed
                  runs should be retained if the template lifecycle is immutable/tekton.
                  Runs older than this (ordered by creation time) will be deleted.
                  Setting higher values will increase memory footprint.
                properties:
                  maxFailedRuns:
                    description: MaxFailedRuns is the number of failed runs to retain.
                    format: int64
                    minimum: 1
                    type: integer
                  maxSuccessfulRuns:
                    description: MaxSuccessfulRuns is the number of successful runs
                      to retain.
                    format: int64
                    minimum: 1
                    type: integer
                required:
                - maxFailedRuns
                - maxSuccessfulRuns
                type: object
              template:
                description: 'Template defines a resource template for a Kubernetes
                  Resource or Custom Resource which is applied to the server each
                  time the blueprint is applied. Templates support simple value interpolation
                  using the $()$ marker format. For more information, see: https://cartographer.sh/docs/latest/templating/
                  You cannot define both Template and Ytt at the same time. You should
                  not define the namespace for the resource - it will automatically
                  be created in the owner namespace. If the namespace is specified
                  and is not the owner namespace, the resource will fail to be created.'
                type: object
                x-kubernetes-preserve-unknown-fields: true
              ytt:
                description: 'Ytt defines a resource template written in `ytt` for
                  a Kubernetes Resource or Custom Resource which is applied to the
                  server each time the blueprint is applied. Templates support simple
                  value interpolation using the $()$ marker format. For more information,
                  see: https://cartographer.sh/docs/latest/templating/ You cannot
                  define both Template and Ytt at the same time. You should not define
                  the namespace for the resource - it will automatically be created
                  in the owner namespace. If the namespace is specified and is not
                  the owner namespace, the resource will fail to be created.'
                type: string
            required:
            - configPath
            type: object
        required:
        - metadata
        - spec
        type: object
    served: true
    storage: true
