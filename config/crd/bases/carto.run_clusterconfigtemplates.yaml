# Copyright 2021 VMware
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.8.0
  creationTimestamp: null
  name: clusterconfigtemplates.carto.run
spec:
  group: carto.run
  names:
    kind: ClusterConfigTemplate
    listKind: ClusterConfigTemplateList
    plural: clusterconfigtemplates
    singular: clusterconfigtemplate
  scope: Cluster
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: 'Spec describes the config template. More info: https://cartographer.sh/docs/latest/reference/template/#clusterconfigtemplate'
            properties:
              configPath:
                description: 'ConfigPath is a path into the templated object''s data
                  that contains valid yaml. This is typically the information that
                  will configure the components of the deployable image. ConfigPath
                  is specified in jsonpath format, eg: .data'
                type: string
              params:
                description: 'Additional parameters. See: https://cartographer.sh/docs/latest/architecture/#parameter-hierarchy'
                items:
                  properties:
                    default:
                      description: DefaultValue of the parameter. Causes the parameter
                        to be optional; If the Owner or Template does not specify
                        this parameter, this value is used.
                      x-kubernetes-preserve-unknown-fields: true
                    name:
                      description: Name of a parameter the template accepts from the
                        Blueprint or Owner.
                      type: string
                  required:
                  - default
                  - name
                  type: object
                type: array
              template:
                description: 'Template defines a resource template for a Kubernetes
                  Resource or Custom Resource which is applied to the server each
                  time the blueprint is applied. Templates support simple value interpolation
                  using the $()$ marker format. For more information, see: https://cartographer.sh/docs/latest/templating/
                  You cannot define both Template and Ytt at the same time.'
                type: object
                x-kubernetes-preserve-unknown-fields: true
              ytt:
                description: 'Ytt defines a resource template written in `ytt` for
                  a Kubernetes Resource or Custom Resource which is applied to the
                  server each time the blueprint is applied. Templates support simple
                  value interpolation using the $()$ marker format. For more information,
                  see: https://cartographer.sh/docs/latest/templating/ You cannot
                  define both Template and Ytt at the same time.'
                type: string
            required:
            - configPath
            type: object
        required:
        - metadata
        - spec
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
