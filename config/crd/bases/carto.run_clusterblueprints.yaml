# Copyright 2021 VMware
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.8.0
  creationTimestamp: null
  name: clusterblueprints.carto.run
spec:
  group: carto.run
  names:
    kind: ClusterBlueprint
    listKind: ClusterBlueprintList
    plural: clusterblueprints
    shortNames:
    - cb
    singular: clusterblueprint
  scope: Cluster
  versions:
  - name: v2alpha1
    schema:
      openAPIV3Schema:
        description: 'ClusterBlueprint represents a component within Cartographer
          Todo: be less asinine'
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              components:
                description: 'Components are a list of child blueprints which this
                  blueprint creates and maintains during the lifetime of the OwnerObject.
                  If OutputTypeRef is specified, the last item in this list must emit
                  that type. If it doesn''t, the condition (todo: document condition
                  here) One of Components or Template can be specified exclusively.'
                items:
                  description: 'Component to a subcomponent Note: There are no params
                    specified at this level. See BlueprintSpec.Params and TemplateSpec.Params'
                  properties:
                    blueprintRef:
                      description: BlueprintRef identifies the template used to produce
                        this resource Only one of BlueprintRef and Options can be
                        specified.
                      properties:
                        name:
                          description: Name of the blueprint
                          minLength: 1
                          type: string
                      type: object
                    name:
                      description: Name of the component. Used as a reference for
                        inputs. Template components are identified by this name in
                        the BlueprintStatus
                      type: string
                    options:
                      description: Options is a list of template names and Selector.
                        A template will be selected if the workload matches the specified
                        selector. Only one template can be selected. Only one of BlueprintRef
                        and Options can be specified. Minimum number of items in list
                        is two.
                      items:
                        properties:
                          name:
                            description: Name of the template to apply
                            minLength: 1
                            type: string
                          selector:
                            description: Selector is a criteria to match against  a
                              workload or deliverable resource.
                            properties:
                              matchExpressions:
                                description: matchExpressions is a list of label selector
                                  requirements. The requirements are ANDed.
                                items:
                                  description: A label selector requirement is a selector
                                    that contains values, a key, and an operator that
                                    relates the key and values.
                                  properties:
                                    key:
                                      description: key is the label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values.
                                        If the operator is In or NotIn, the values
                                        array must be non-empty. If the operator is
                                        Exists or DoesNotExist, the values array must
                                        be empty. This array is replaced during a
                                        strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchFields:
                                description: MatchFields is a list of field selector
                                  requirements. The requirements are ANDed.
                                items:
                                  properties:
                                    key:
                                      description: 'Key is the JSON path in the workload
                                        to match against. e.g. for workload: "workload.spec.source.git.url",
                                        e.g. for deliverable: "deliverable.spec.source.git.url"'
                                      minLength: 1
                                      type: string
                                    operator:
                                      description: Operator represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists and DoesNotExist.
                                      enum:
                                      - In
                                      - NotIn
                                      - Exists
                                      - DoesNotExist
                                      type: string
                                    values:
                                      description: Values is an array of string values.
                                        If the operator is In or NotIn, the values
                                        array must be non-empty. If the operator is
                                        Exists or DoesNotExist, the values array must
                                        be empty.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                description: matchLabels is a map of {key,value} pairs.
                                  A single {key,value} in the matchLabels map is equivalent
                                  to an element of matchExpressions, whose key field
                                  is "key", the operator is "In", and the values array
                                  contains only "value". The requirements are ANDed.
                                type: object
                            type: object
                        required:
                        - name
                        - selector
                        type: object
                      minItems: 2
                      type: array
                  required:
                  - blueprintRef
                  - name
                  type: object
                type: array
              description:
                description: Description of the blueprint If not set, this does not
                  reflect descriptions in child blueprints or templates
                type: string
              outputTypeRef:
                description: OutputTypeRef refers to an object describing the contract
                  this blueprint can fulfill This is optional, however without an
                  output, this Blueprint cannot be the cause of a reconciliation of
                  sibling components in a parent blueprint.
                properties:
                  name:
                    description: Name of the ClusterBlueprintType that defines the
                      output type of this blueprint.
                    type: string
                required:
                - name
                type: object
              params:
                description: Params for templates and overrides for child blueprints.
                items:
                  properties:
                    default:
                      description: 'DefaultValue of the parameter. Causes the parameter
                        to be optional If multiple children exist that specify DefaultValue,
                        and Value is not set, this must be set. Otherwise a "ParametersReady:False,
                        Reason: ParameterDefaultValueCollision" condition occurs.'
                      x-kubernetes-preserve-unknown-fields: true
                    description:
                      description: Description of the parameter If a children exist,
                        will hide child descriptions Otherwise, child descriptions
                        are joined with newlines and that result is used
                      type: string
                    name:
                      description: Name of the parameter. Template blueprints must
                        specify params to use them Non-Template blueprints can modify
                        template parameters by specifying parameters
                      type: string
                    value:
                      description: 'Value of the parameter. If specified, parent properties
                        are ignored. If multiple children exist that specify Value,
                        this must be set, otherwise a "ParametersReady:False, Reason:
                        ParameterValueCollision" condition occurs.'
                      x-kubernetes-preserve-unknown-fields: true
                  required:
                  - name
                  type: object
                type: array
              template:
                description: 'Template is a definition of a resource this component
                  stamps onto the cluster One of Components or Template can be specified
                  exclusively. Todo: explain the problem with the absence of oneOf
                  and semantic error checking Todo: opinions about template.template?
                  resource.template instead?'
                properties:
                  healthRule:
                    description: HealthRule specifies rubric for determining the health
                      of a resource stamped by this template
                    properties:
                      alwaysHealthy:
                        description: AlwaysHealthy being set indicates the resource
                          should always be considered healthy
                        type: object
                      multiMatch:
                        description: MultiMatch specifies explicitly which conditions
                          and/or fields should be used to determine healthiness.
                        properties:
                          healthy:
                            description: Healthy is a HealthMatchRule which stipulates
                              requirements, ALL of which must be met for the resource
                              to be considered healthy.
                            properties:
                              matchConditions:
                                description: MatchConditions are the conditions and
                                  statuses to read.
                                items:
                                  properties:
                                    status:
                                      description: Status is the status of the condition
                                      type: string
                                    type:
                                      description: Type is the type of the condition
                                      type: string
                                  required:
                                  - status
                                  - type
                                  type: object
                                type: array
                              matchFields:
                                description: MatchFields stipulates a FieldSelectorRequirement
                                  for this rule.
                                items:
                                  properties:
                                    key:
                                      description: 'Key is the JSON path in the workload
                                        to match against. e.g. for workload: "workload.spec.source.git.url",
                                        e.g. for deliverable: "deliverable.spec.source.git.url"'
                                      minLength: 1
                                      type: string
                                    messagePath:
                                      description: MessagePath is specified in jsonpath
                                        format. It is evaluated against the resource
                                        to provide a message in the owner's resource
                                        condition if it is the first matching requirement
                                        that determine the current ResourcesHealthy
                                        condition status.
                                      type: string
                                    operator:
                                      description: Operator represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists and DoesNotExist.
                                      enum:
                                      - In
                                      - NotIn
                                      - Exists
                                      - DoesNotExist
                                      type: string
                                    values:
                                      description: Values is an array of string values.
                                        If the operator is In or NotIn, the values
                                        array must be non-empty. If the operator is
                                        Exists or DoesNotExist, the values array must
                                        be empty.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                            type: object
                          unhealthy:
                            description: Unhealthy is a HealthMatchRule which stipulates
                              requirements, ANY of which, when met, indicate that
                              the resource should be considered unhealthy.
                            properties:
                              matchConditions:
                                description: MatchConditions are the conditions and
                                  statuses to read.
                                items:
                                  properties:
                                    status:
                                      description: Status is the status of the condition
                                      type: string
                                    type:
                                      description: Type is the type of the condition
                                      type: string
                                  required:
                                  - status
                                  - type
                                  type: object
                                type: array
                              matchFields:
                                description: MatchFields stipulates a FieldSelectorRequirement
                                  for this rule.
                                items:
                                  properties:
                                    key:
                                      description: 'Key is the JSON path in the workload
                                        to match against. e.g. for workload: "workload.spec.source.git.url",
                                        e.g. for deliverable: "deliverable.spec.source.git.url"'
                                      minLength: 1
                                      type: string
                                    messagePath:
                                      description: MessagePath is specified in jsonpath
                                        format. It is evaluated against the resource
                                        to provide a message in the owner's resource
                                        condition if it is the first matching requirement
                                        that determine the current ResourcesHealthy
                                        condition status.
                                      type: string
                                    operator:
                                      description: Operator represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists and DoesNotExist.
                                      enum:
                                      - In
                                      - NotIn
                                      - Exists
                                      - DoesNotExist
                                      type: string
                                    values:
                                      description: Values is an array of string values.
                                        If the operator is In or NotIn, the values
                                        array must be non-empty. If the operator is
                                        Exists or DoesNotExist, the values array must
                                        be empty.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                            type: object
                        required:
                        - healthy
                        - unhealthy
                        type: object
                      singleConditionType:
                        description: SingleConditionType names a single condition
                          which, when True indicates the resource is healthy. When
                          False it is unhealthy. Otherwise, healthiness is Unknown.
                        type: string
                    type: object
                  outputMapping:
                    description: 'An output mapping connects fields in the stamped
                      resource with the structure of the OutputTypeRef specified for
                      this Component. With only one entry in the mapping, it''s possible
                      to map a simple value onto a simple type, or a complex, value
                      onto a complex type (a one to one mapping). When the resource''s
                      results do not match the exact shape of the OutputTypeRef, you
                      can use multiple mappings to coerce the correct shape. Todo:
                      examples in docs and a link.'
                    items:
                      properties:
                        path:
                          description: Path is a JSONPath that represents the field
                            in the OutputType that is fulfilled by Path
                          type: string
                        resourcePath:
                          description: "ResourcePath\tis a JSONPath that represents
                            where to find the value in the stamped resource. ResourcePath
                            can refer to a simple or complex type,"
                          type: string
                      required:
                      - path
                      - resourcePath
                      type: object
                    type: array
                  template:
                    description: 'Template defines a resource template for a Kubernetes
                      Resource or Custom Resource which is applied to the server each
                      time the blueprint is applied. Templates support simple value
                      interpolation using the $()$ marker format. For more information,
                      see: https://cartographer.sh/docs/latest/templating/ You cannot
                      define both Template and Ytt at the same time. You should not
                      define the namespace for the resource - it will automatically
                      be created in the owner namespace. If the namespace is specified
                      and is not the owner namespace, the resource will fail to be
                      created.'
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                  ytt:
                    description: 'Ytt defines a resource template written in `ytt`
                      for a Kubernetes Resource or Custom Resource which is applied
                      to the server each time the blueprint is applied. Templates
                      support simple value interpolation using the $()$ marker format.
                      For more information, see: https://cartographer.sh/docs/latest/templating/
                      You cannot define both Template and Ytt at the same time. You
                      should not define the namespace for the resource - it will automatically
                      be created in the owner namespace. If the namespace is specified
                      and is not the owner namespace, the resource will fail to be
                      created.'
                    type: string
                type: object
            type: object
          status:
            properties:
              calculated:
                description: Calculated list of input params based on templates and
                  overrides
                items:
                  description: CalculatedParam is one of the available parameters
                    exposed by the template or sub-blueprints within this blueprint.
                    ClusterSelectors further allow these parameters to be configured
                    or mapped to OwnerResource fields.
                  properties:
                    default:
                      description: Default value of the parameter. If set, can be
                        overridden by the ClusterSelectorMapping
                      x-kubernetes-preserve-unknown-fields: true
                    description:
                      description: Description(s) of this parameter. if multiple children
                        exist, then they are joined with newlines
                      type: string
                    name:
                      description: Name of the parameter
                      type: string
                    value:
                      description: Value of the parameter. If set, cannot be overridden
                        by the ClusterSelectorMapping Value is mutually exclusive
                        with Default
                      x-kubernetes-preserve-unknown-fields: true
                  required:
                  - name
                  type: object
                type: array
              conditions:
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    type FooStatus struct{ // Represents the observations of a foo's
                    current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the Generation of this resource's
                  spec that reconciled the contents of this status.
                format: int64
                type: integer
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
